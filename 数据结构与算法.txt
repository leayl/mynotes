数据结构

一、逻辑结构
	指数据对象中数据元素之间的相互关系
	a、集合结构：除在同一个集合中之外，无其他关系
	b、线性结构：一对一关系
	c、树形结构：一对多层次关系
	d、图形结构：多对多关系
	
二、物理结构
	指数据的逻辑结构在计算机中的存储形式
	存储形式：
		a、顺序存储结构：存储在地址连续的存储单元
		b、链式存储结构：结构会变化，数据存储单元任意，可连续，可不连续



		
算法

特征：输入（0+）、输出（1+）、有穷性（自动结束，不会无限循环）、确定性、可行性（每一步有限次数完成）
设计要求：
	a、正确性
		无语法错误
		对合法输入能产生满足要求的输出
		对非法输入能产生满足规格的说明
		对故意刁难的测试输入都有满足要求的输出结果
	b、可读性
	c、健壮性
	d、时间效率高和存储量低
算法效率的度量方法
	a、事后统计方法
		必须依据算法事先编好的测试程序
		不同测试环境出的结果差别太大
	b、事前分析估算方法
	

    

二、算法时间复杂度

	函数的渐进增长
		给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n>N，f(n)总是比g(n)大，那么，表示f(n)的渐进增长快于g(n)
		常数项、与最高次项相乘的常数、
		判断一个算法的效率时，函数中的常数和其它次要项常常可以忽略，更应该关注主项（最高项）的阶数
		
	常用时间复杂度所耗费时间依次是：
	O(1) < O(logn) < O(n) < O(nlogn) < O (n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)
	
三、算法空间复杂度
	算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，、
	f(n)为语句关于n所占存储空间的函数
	

抽象数据类型
	标准格式：
		ADT	抽象数据类型名
		Data
			数据元素之间逻辑关系的定义
		Operation
			操作
		endADT

一、线性表(List)
	由零个或多个数据元素组成的有限序列
	元素个数为0的线性表称为空表
	第一个元素无前驱，最后一个元素无后继，其他元素都有且只有一个前驱和后继
	
	线性表的抽象数据类型：
	ADT List
	Operation
		InitList(*L): 初始化
		ListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false
		ClearList(*L): 将线性表清空
		GetElem(L, i, *e): 将线性表L中的第i个位置元素值返回给e
		LocateElem(L, e): 在线性表L中查找与给定值e相等的元素，查找成功则返回该元素在表中序号，否则返回0（线性表中从1开始）
		ListInsert(*L, i, e): 在线性表L中第i个位置插入新元素e
		ListDelete(*L, i, *e): 删除线性表L中第i个位置元素，并用e返回其值
		ListLength(L): 返回线性表L的元素个数
	endADT
	
	1、线性表的顺序存储结构
		顺序结构封装需三个属性：
			a、存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置
			b、线性表的最大存储容量：数组的长度：MaxSize
			c、线性表的当前长度：length
		地址计算方法：从1开始

		线性表顺序存储结构的优缺点：
			适合元素个数比较稳定，不经常删除和插入元素，而更多地操作是存取数据的应用
			优点：
				a、在存、读数据时，时间复杂度都是O(1)
				b、在插入、删除时，时间复杂度都是O(n)
				c、无需为表示表中元素之间的逻辑关系而增加额外的存储空间
				d、可以快速地存取表中任意位置的元素
			缺点：
				a、插入和删除操作需要移动大量元素
				b、当线性表长度变化较大时，难以确定存储空间的容量
			c、容易造成存储空间的“碎片”
			
	2、线性表的链式存储结构
		定义：存储数据元素信息的域称为数据域，把存储的直接后继位置的域称为指针域。
		指针域中存储的信息称为指针或链。这两部分的信息组成数据称为存储映像，称为节点（Node）。
		n个节点链接成一个链表，即为线性表的链式存储结构。因为此链表的每个节点中只包含一个指针域，所以叫单链表。
		
	3、单链表
		链表中第一个节点的存储位置叫做头指针，最后一个节点的指针为空（NULL）。
		a、头指针
			1)头指针是指链表指向第一个节点的指针，若链表有头结点，则是指向头结点的指针
			2)头指针具有标识作用，所以常用头指针冠以链表的名字(指针变量的名字)
			3)无论链表是否为空，头指针均不为空
			4)头指针是链表的必要元素
		b、头结点
			1)头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义(但也可用来存放链表的长度)
			2)有了头结点，对在第一元素结点前插入结点和删除第一节点操作与其他节点的操作就统一了
			3)头结点不一定是链表的必需要素
		c、单链表的插入
			1)找到指定位置的结点ai
			2)生成结点an，后继节点设置为ai+1的后继节点
			3)ai的后继节点设置为an
			重要：2)、3)步不可交换
		d、单链表的删除
			1)找到指定要删除的节点ai
			2)将ai-1的后继节点设置为ai+1
			3)释放ai
		e、对于插入或删除数据越频繁的操作，单链表的优势越是明显
		f、头插法建立单链表
			新结点在链表头部插入，数据顺序调转
		g、尾插法建立单链表
			新结点在链表尾部插入，有一个指针动态地指向链表尾部
		h、单链表的整表删除
	4、单链表结构与顺序存储结构优缺点
		a、存储分配方式：
			1)顺序存储结构用一段连续的存储单元一次存储线性表的数据元素
			2)单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素
		b、时间性能
			1)查找：顺序存储结构O(1),单链表O(n)
			2)插入和删除：
				顺序存储结构需要平均移动表长一半的元素，时间为O(n);
				单链表在计算出某位置的指针后，插入和删除时间仅为O(1);
		c、空间性能
			1)顺序存储结构需要预分配存储空间，分大了，容易造成空间浪费，分小了，容易发生溢出;
			2)单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制
		d、结论
			1)若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构
			2)需要频繁插入和删除，很少进行查找操作时，宜采用单链表结构
			3)当线性表的元素个数变化较大或者根本不知道有多大时，最好采用单链表结构
			4)如果事先知道线性表的大致长度，用顺序存储结构效率会高很多
	5、静态链表
		a、备忘
			1)数组的第一个和最后一个元素做特殊处理，不存放数据data
			2)通常把未使用的数组元素称为备用链表
			3)数组的第一个元素，即下标为0的那个元素的游标(cur)就存放备用链表的第一个节点的下标(除头尾元素之外的第一个无数据元素)
			4)数组的最后一个元素，即下标为MAXSIZE-1的游标(cur)则存放第一个有数值的元素的下标，相当于单链表中的头结点的作用
		b、静态链表的插入操作
			
		c、总结
			1)优点：在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点
				
			2)缺点：
				没有解决连续存储分配(数组)带来的表长难以确定的问题
				失去了顺序存储结构随机存取的特性
	6、单向循环链表
		a、定义
			将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表c、
		约瑟夫环
		魔术师发牌问题
		拉丁矩阵
	7、双向链表
		a、双向链表相对于单向链表来说，每个结点多了一个prior前驱指针，指向前驱元素
二、栈和队列
		a、栈：先进后出，只能在末尾（栈顶）进行增删操作
			使用顺序存储结构
		b、队列：先进先出，只允许再一端进行插入操作，而在另一端进行删除操作的线性表
			使用链式存储结构
		
		*递归
			定义：一个直接调用自己或通过一系列的调用语句间接地调用自己的函数称为递归函数
			**每个递归定义必须至少有一个条件，当满足这个条件时递归不再进行，即函数不再调用自身而是返回
			大量的递归调用会建立函数的副本，消耗大量时间和内存，比起迭代效率较低
		
		汉诺塔(递归算法)(见demo)
		八皇后问题(回溯算法，递归算法)(见demo)
		
		字符串
			a、字符串的存储结构与线性表形同，也分顺序存储结构和链式存储结构
			b、字符串的顺序存储结构是用一组地址连续的存储单元来存储串中的字符序列的
			c、按照预定义的大小，为每个定义的字符串变量分配一个固定长度的存储区，一般用定长数组来定义
			d、与线性表相似，既然是固定长度的存储区，就存在一个空间分配不灵活的问题，那么会考虑用链式存储结构
			
三、树
    定义；树是n(n>0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：
        a、有且仅有一个特定的成为根(root)的结点
        b、当n > 1 时，其余节点可分为m(m>0)个互不相交的有限集T1、T2..Tm,其中每一个集合本身又是一棵树，并且成为根的子树(subtree)
        c、节点拥有的子树个数结点的度(degree)。
            I、树的度取树内各结点的度的最大值
            II、度为0的节点称为叶节点(leaf)或终端结点
            III、度不为0的节点称为分支节点或非终端节点，除根节点外，分支节点称为内部结点
    结点间关系：
           > child
     parent          >>sibling
           > child
    树中结点的最大层次成为树的深度(depth)或高度
    有序树：树中的结点的各个子树从左到右是有次序的，不能互换的
    无序树：与有序树相反
    森林(forest)：是m(m>=0)棵互不相交的树的集合，对树中的每个结点而言，其子树的集合即为森林


		










